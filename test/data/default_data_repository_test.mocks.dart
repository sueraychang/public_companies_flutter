// Mocks generated by Mockito 5.4.2 from annotations
// in publiccompanies/test/data/default_data_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:publiccompanies/data/data_source.dart' as _i3;
import 'package:publiccompanies/domain/entities/company.dart' as _i6;
import 'package:publiccompanies/domain/entities/industry.dart' as _i5;
import 'package:publiccompanies/domain/entities/result.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSource extends _i1.Mock implements _i3.DataSource {
  MockDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<List<_i5.Industry>>> getIndustries() =>
      (super.noSuchMethod(
        Invocation.method(
          #getIndustries,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.Industry>>>.value(
            _FakeResult_0<List<_i5.Industry>>(
          this,
          Invocation.method(
            #getIndustries,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.Industry>>>);

  @override
  _i4.Future<_i2.Result<_i5.Industry>> getIndustry(String? industryCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIndustry,
          [industryCode],
        ),
        returnValue: _i4.Future<_i2.Result<_i5.Industry>>.value(
            _FakeResult_0<_i5.Industry>(
          this,
          Invocation.method(
            #getIndustry,
            [industryCode],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.Industry>>);

  @override
  _i4.Future<_i2.Result<bool>> saveIndustries(
          {required List<_i5.Industry>? industries}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveIndustries,
          [],
          {#industries: industries},
        ),
        returnValue: _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #saveIndustries,
            [],
            {#industries: industries},
          ),
        )),
      ) as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<bool>> clearIndustries() => (super.noSuchMethod(
        Invocation.method(
          #clearIndustries,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #clearIndustries,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<List<_i6.Company>>> getCompanies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompanies,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<List<_i6.Company>>>.value(
            _FakeResult_0<List<_i6.Company>>(
          this,
          Invocation.method(
            #getCompanies,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i6.Company>>>);

  @override
  _i4.Future<_i2.Result<_i6.Company>> getCompany(String? companyCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompany,
          [companyCode],
        ),
        returnValue: _i4.Future<_i2.Result<_i6.Company>>.value(
            _FakeResult_0<_i6.Company>(
          this,
          Invocation.method(
            #getCompany,
            [companyCode],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i6.Company>>);

  @override
  _i4.Future<_i2.Result<bool>> saveCompanies(
          {required List<_i6.Company>? companies}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCompanies,
          [],
          {#companies: companies},
        ),
        returnValue: _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #saveCompanies,
            [],
            {#companies: companies},
          ),
        )),
      ) as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<bool>> clearCompanies() => (super.noSuchMethod(
        Invocation.method(
          #clearCompanies,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #clearCompanies,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<bool>>);

  @override
  List<_i6.Company> getCollections() => (super.noSuchMethod(
        Invocation.method(
          #getCollections,
          [],
        ),
        returnValue: <_i6.Company>[],
      ) as List<_i6.Company>);

  @override
  _i2.Result<_i6.Company> getCollection(String? companyCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollection,
          [companyCode],
        ),
        returnValue: _FakeResult_0<_i6.Company>(
          this,
          Invocation.method(
            #getCollection,
            [companyCode],
          ),
        ),
      ) as _i2.Result<_i6.Company>);

  @override
  _i4.Future<_i2.Result<bool>> addToCollections(_i6.Company? company) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToCollections,
          [company],
        ),
        returnValue: _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #addToCollections,
            [company],
          ),
        )),
      ) as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<bool>> deleteFromCollections(String? companyCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFromCollections,
          [companyCode],
        ),
        returnValue: _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #deleteFromCollections,
            [companyCode],
          ),
        )),
      ) as _i4.Future<_i2.Result<bool>>);
}
